# 5.1. Написать генератор нечётных чисел от 1 до n (включительно), используя ключевое слово yield.

def odd_nums(max_num):
    for n in range(1, max_num + 1, 2):
        yield n


# (вместо 1) Решить задачу генерации нечётных чисел от 1 до n (включительно), не используя ключевое слово yield.

def odd_nums1(max_num):
        return (n for n in range(1, max_num + 1, 2))


# 5.2. Есть два списка:
# tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей',  'Дмитрий', 'Борис', 'Елена']
# klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>).
#
# Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в списке klasses меньше элементов, чем в списке tutors, необходимо
# вывести последние кортежи в виде: (<tutor>, None).

tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей',  'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

def group():
    for t in range(len(tutors)):
        yield tutors[t], klasses[t]
    if t < len(klasses):
        yield None, klasses[t]

print(type(group()))


# 5.3 Представлен список чисел. Необходимо вывести те его элементы, значения которых больше предыдущего, например:

src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result = [12, 44, 4, 10, 78, 123]

res = [r for s, r in zip(src, src[1:]) if s < r]


# 5.4 Подумайте, как можно сделать оптимизацию кода по памяти, по скорости.
# Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать из этих элементов список с
# сохранением порядка их следования в исходном списке, например:

src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = [23, 1, 3, 10, 4, 11]
set_set = set()
uniq_set = set()
for s in src:
    if s not in uniq_set:
        uniq_set.add(s)
    else:
        uniq_set.discard(s)
uniq_list = [s for s in src if s in uniq_set]
